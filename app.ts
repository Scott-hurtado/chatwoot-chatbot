import { createBot, createProvider, createFlow, addKeyword, EVENTS } from '@builderbot/bot'
import { MemoryDB as Database } from '@builderbot/bot'
import { MetaProvider as Provider } from '@builderbot/provider-meta'
import { chat, getCareerAdvice, getMotivationalMessage } from './gemini'
import vacantesDB from './database'
import chatwootService from './chatwoot'
import { setupChatwootWebhook } from './webhook'
import express from 'express'
import type { VacanteFilters, Modalidad, TipoVacante } from './types'

const PORT = process.env.PORT ?? 3008

// Estado de conversaci√≥n
interface ConversationState {
    currentFlow?: 'search' | 'none'
    searchType?: TipoVacante
    carrera?: string
    lugar?: string
    modalidad?: Modalidad
    step?: 'carrera' | 'lugar' | 'modalidad'
    chatwootConversationId?: number
}

// Funci√≥n para detectar intenci√≥n
const detectIntent = (text: string): string | null => {
    const lowerText = text.toLowerCase()
    
    if (['buscar pr√°ctica', 'busco pr√°ctica', 'quiero pr√°ctica', 'buscar servicio', 'busco servicio'].some(p => lowerText.includes(p))) {
        return 'search_flow'
    }
    
    if (lowerText.includes('vacantes de') || lowerText.includes('pr√°cticas de')) {
        return 'direct_career'
    }
    
    if (lowerText.includes('vacantes remota') || lowerText.includes('pr√°ctica remota')) {
        return 'remote_search'
    }
    
    if (lowerText.includes('todas las vacantes') || lowerText.includes('ver vacantes')) {
        return 'list_all'
    }
    
    if (['ayuda', 'help', 'comandos'].some(h => lowerText.includes(h))) {
        return 'help'
    }
    
    return null
}

// Funci√≥n helper para enviar a Chatwoot
const sendToChatwoot = async (phoneNumber: string, message: string, userName?: string) => {
    try {
        await chatwootService.processMessage(phoneNumber, message, userName)
        console.log(`üì® Mensaje enviado a Chatwoot: ${phoneNumber}`)
    } catch (error) {
        console.error('‚ùå Error enviando a Chatwoot:', error)
    }
}

// Flujo principal √∫nico con integraci√≥n Chatwoot
const mainFlow = addKeyword<Provider, Database>(EVENTS.WELCOME)
    .addAction(async (ctx, { flowDynamic, state }) => {
        const userInput = ctx.body
        const phoneNumber = ctx.from
        const userName = ctx.pushName || ctx.from
        
        console.log(`üì± Mensaje recibido de ${userName} (${phoneNumber}): ${userInput}`)
        
        // Enviar mensaje entrante a Chatwoot
        await sendToChatwoot(phoneNumber, userInput, userName)
        
        const conversationState: ConversationState = state.getMyState() || {}
        
        // Si estamos en flujo de b√∫squeda, manejarlo
        if (conversationState.currentFlow === 'search') {
            await handleSearchFlow(userInput, conversationState, state, flowDynamic, phoneNumber)
            return
        }
        
        // Detectar nueva intenci√≥n
        const intent = detectIntent(userInput)
        
        if (intent === 'search_flow') {
            const tipo = userInput.toLowerCase().includes('servicio') ? 'servicio_social' : 'practicas_profesionales'
            
            const newState: ConversationState = {
                currentFlow: 'search',
                searchType: tipo as TipoVacante,
                step: 'carrera'
            }
            
            await state.update(newState)
            const response = 'üéì ¬øQu√© carrera estudias?'
            await flowDynamic(response)
            return
        }
        
        if (intent === 'direct_career') {
            const carrera = userInput.toLowerCase()
                .replace(/vacantes de/g, '')
                .replace(/pr√°cticas de/g, '')
                .trim()
                
            if (carrera.length > 2) {
                await searchByCareer(carrera, flowDynamic, phoneNumber)
            } else {
                const response = 'Por favor especifica la carrera. Ejemplo: "vacantes de ingenier√≠a"'
                await flowDynamic(response)
            }
            return
        }
        
        if (intent === 'remote_search') {
            await searchByModality('remoto', flowDynamic, phoneNumber)
            return
        }
        
        if (intent === 'list_all') {
            await showAllVacancies(flowDynamic, phoneNumber)
            return
        }
        
        if (intent === 'help') {
            await showHelp(flowDynamic, phoneNumber)
            return
        }
        
        // Si no hay intenci√≥n espec√≠fica, usar IA o fallback
        let response: string
        try {
            response = await chat(
                'Eres un asistente para estudiantes buscando pr√°cticas. Si preguntan sobre vacantes, sugiere "buscar pr√°cticas".',
                userInput
            )
        } catch (error) {
            response = getFallbackResponse(userInput)
        }
        
        await flowDynamic(response)
    })

// Resto de las funciones (mantienen la misma l√≥gica)
async function handleSearchFlow(
    input: string,
    state: ConversationState,
    stateManager: any,
    flowDynamic: any,
    phoneNumber: string
) {
    let response: string
    
    switch(state.step) {
        case 'carrera': {
            state.carrera = input
            state.step = 'lugar'
            await stateManager.update(state)
            response = 'üìç ¬øEn qu√© ciudad prefieres? (o escribe "cualquiera" para ver todas)'
            await flowDynamic(response)
            break
        }
            
        case 'lugar': {
            state.lugar = input.toLowerCase() === 'cualquiera' ? undefined : input
            state.step = 'modalidad'
            await stateManager.update(state)
            response = 'üíº ¬øQu√© modalidad prefieres?\n\n1Ô∏è‚É£ Presencial\n2Ô∏è‚É£ Remoto\n3Ô∏è‚É£ H√≠brido\n4Ô∏è‚É£ Cualquiera'
            await flowDynamic(response)
            break
        }
            
        case 'modalidad': {
            let modalidad: Modalidad | undefined
            
            if (input === '1' || input.includes('presencial')) modalidad = 'presencial'
            else if (input === '2' || input.includes('remot')) modalidad = 'remoto'
            else if (input === '3' || input.includes('h√≠brid') || input.includes('hibrid')) modalidad = 'hibrido'
            
            const filters: VacanteFilters = {
                carrera: state.carrera,
                lugar: state.lugar,
                modalidad,
                tipo_vacante: state.searchType
            }
            
            await performSearch(filters, state.carrera || '', flowDynamic, phoneNumber)
            await stateManager.update({ currentFlow: 'none' })
            break
        }
    }
}

async function performSearch(filters: VacanteFilters, carrera: string, flowDynamic: any, phoneNumber: string) {
    try {
        let response = 'üîç Buscando oportunidades perfectas para ti...'
        await flowDynamic(response)
        
        const vacantes = await vacantesDB.getVacantesWithFilters(filters)
        
        if (vacantes.length === 0) {
            response = '‚ùå No encontr√© vacantes con esos criterios.\n\nIntenta con otros filtros o escribe "todas las vacantes".'
            await flowDynamic(response)
        } else {
            response = `‚úÖ ¬°Encontr√© ${vacantes.length} oportunidades para ti!\n`
            await flowDynamic(response)
            
            for (const vacante of vacantes.slice(0, 5)) {
                const vacanteInfo = vacantesDB.formatVacanteInfo(vacante)
                await flowDynamic(vacanteInfo)
                await flowDynamic('---')
            }
            
            if (vacantes.length > 5) {
                response = `\nüìå Hay ${vacantes.length - 5} vacantes m√°s que cumplen tus criterios.`
                await flowDynamic(response)
            }
            
            response = '\n' + getMotivationalMessage()
            await flowDynamic(response)
        }
    } catch (error) {
        console.error('Error en b√∫squeda:', error)
        const response = '‚ùå Hubo un error al buscar. Por favor intenta de nuevo.'
        await flowDynamic(response)
    }
}

async function searchByCareer(carrera: string, flowDynamic: any, phoneNumber: string) {
    try {
        const vacantes = await vacantesDB.getVacantesByCarrera(carrera)
        
        if (vacantes.length === 0) {
            const response = `‚ùå No encontr√© vacantes para "${carrera}".\n\nPuedes intentar con otro t√©rmino o escribir "buscar pr√°cticas".`
            await flowDynamic(response)
        } else {
            let response = `‚úÖ Encontr√© ${vacantes.length} oportunidades para ${carrera}:\n`
            await flowDynamic(response)
            
            for (const vacante of vacantes.slice(0, 5)) {
                const vacanteInfo = vacantesDB.formatVacanteInfo(vacante)
                await flowDynamic(vacanteInfo)
                await flowDynamic('---')
            }
            
            if (vacantes.length > 5) {
                response = `üìå Hay ${vacantes.length - 5} vacantes m√°s.`
                await flowDynamic(response)
            }
            
            response = '\n' + getMotivationalMessage()
            await flowDynamic(response)
        }
    } catch (error) {
        console.error('Error:', error)
        const response = '‚ùå Hubo un error al buscar.'
        await flowDynamic(response)
    }
}

async function searchByModality(modalidad: Modalidad, flowDynamic: any, phoneNumber: string) {
    try {
        const vacantes = await vacantesDB.getVacantesWithFilters({ modalidad })
        
        if (vacantes.length === 0) {
            const response = '‚ùå No encontr√© vacantes remotas.'
            await flowDynamic(response)
        } else {
            let response = `‚úÖ Vacantes remotas (${vacantes.length}):\n`
            await flowDynamic(response)
            
            for (const vacante of vacantes.slice(0, 5)) {
                const vacanteResumen = vacantesDB.formatVacanteResumen(vacante)
                await flowDynamic(vacanteResumen)
            }
            
            if (vacantes.length > 5) {
                response = `\n... y ${vacantes.length - 5} m√°s.`
                await flowDynamic(response)
            }
            
            response = '\nüí° Tip: Puedes filtrar por carrera escribiendo "vacantes de [carrera]"'
            await flowDynamic(response)
        }
    } catch (error) {
        const response = '‚ùå Error al buscar vacantes.'
        await flowDynamic(response)
    }
}

async function showAllVacancies(flowDynamic: any, phoneNumber: string) {
    try {
        const vacantes = await vacantesDB.getAllVacantes()
        const stats = await vacantesDB.getEstadisticas()
        
        if (vacantes.length === 0) {
            const response = '‚ùå No hay vacantes disponibles en este momento.'
            await flowDynamic(response)
        } else {
            let response = `üìä **Estad√≠sticas actuales:**\n` +
                            `Total de vacantes: ${stats.total}\n` +
                            `Ciudades principales: ${stats.porLugar.slice(0, 3).map(l => l.lugar).join(', ')}\n`
            await flowDynamic(response)
            
            response = '\nüìå **√öltimas vacantes publicadas:**\n'
            await flowDynamic(response)
            
            for (const vacante of vacantes.slice(0, 10)) {
                const vacanteResumen = vacantesDB.formatVacanteResumen(vacante)
                await flowDynamic(vacanteResumen)
            }
            
            response = '\nüí° Para ver detalles, escribe "vacantes de [tu carrera]"'
            await flowDynamic(response)
        }
    } catch (error) {
        console.error('Error:', error)
        const response = '‚ùå Error al obtener vacantes.'
        await flowDynamic(response)
    }
}

async function showHelp(flowDynamic: any, phoneNumber: string) {
    const response = 'üìö **Comandos disponibles:**\n\n' +
                     'üîç *buscar pr√°cticas* - B√∫squeda personalizada\n' +
                     'üéì *vacantes de [carrera]* - Por carrera\n' +
                     'üìç *vacantes en [ciudad]* - Por ubicaci√≥n\n' +
                     'üè† *vacantes remotas* - Solo remotas\n' +
                     'üìã *todas las vacantes* - Ver lista general\n\n' +
                     'üí° Ejemplo: "vacantes de ingenier√≠a en sistemas"'
    await flowDynamic(response)
}

function getFallbackResponse(text: string): string {
    const lowerText = text.toLowerCase()
    
    if (['hola', 'hi', 'hello', 'buenas', 'qu√© tal'].some(g => lowerText.includes(g))) {
        return 'üëã ¬°Hola! Soy tu asistente para encontrar pr√°cticas profesionales y servicio social.\n\n' +
               'Puedes escribir:\n' +
               '‚Ä¢ "buscar pr√°cticas" para comenzar\n' +
               '‚Ä¢ "vacantes de [tu carrera]" para b√∫squeda directa\n' +
               '‚Ä¢ "ayuda" para ver todas las opciones'
    }
    
    if (['gracias', 'thanks'].some(t => lowerText.includes(t))) {
        return 'üòä ¬°De nada! Espero que encuentres la oportunidad perfecta. ¬°Mucho √©xito!'
    }
    
    return 'ü§ñ ¬°Hola! Puedo ayudarte a encontrar pr√°cticas y servicio social.\n\n' +
           'Prueba escribiendo:\n' +
           '‚Ä¢ "buscar pr√°cticas"\n' +
           '‚Ä¢ "vacantes de [tu carrera]"\n' +
           '‚Ä¢ "ayuda" para m√°s opciones'
}

const main = async () => {
    try {
        // Conectar a la base de datos
        await vacantesDB.connect()
        console.log('‚úÖ Base de datos conectada')
        
        // Probar conexi√≥n con Chatwoot
        const chatwootConnected = await chatwootService.testConnection()
        if (chatwootConnected) {
            console.log('‚úÖ Chatwoot conectado correctamente')
        } else {
            console.log('‚ö†Ô∏è Chatwoot no disponible, pero el bot funcionar√° normalmente')
        }
        
        // Configurar flujo √∫nico
        const adapterFlow = createFlow([mainFlow])
        
        // Configurar proveedor
        const adapterProvider = createProvider(Provider, {
            jwtToken: process.env.META_JWT_TOKEN || 'jwtToken',
            numberId: process.env.META_NUMBER_ID || 'numberId',
            verifyToken: process.env.META_VERIFY_TOKEN || 'verifyToken',
            version: process.env.META_VERSION || 'v18.0'
        })
        
        const adapterDB = new Database()

        const { httpServer } = await createBot({
            flow: adapterFlow,
            provider: adapterProvider,
            database: adapterDB,
        })

        // Crear servidor Express separado para webhooks
        const app = express()
        
        // Configurar webhook de Chatwoot
        setupChatwootWebhook(app, adapterProvider)
        
        // Iniciar el servidor del bot
        httpServer(+PORT)
        
        // Iniciar servidor Express para webhooks en un puerto diferente
        const webhookPort = parseInt(PORT as string) + 1
        app.listen(webhookPort, () => {
            console.log(`üîó Servidor de webhooks corriendo en puerto ${webhookPort}`)
        })

        console.log('ü§ñ Bot de Vacantes iniciado correctamente')
        console.log('üéì Ayudando a estudiantes a encontrar oportunidades')
        console.log('üîó Integraci√≥n con Chatwoot activa')
        console.log(`üì° Webhook disponible en puerto ${webhookPort}/chatwoot/webhook`)
        console.log(`üöÄ Bot corriendo en puerto ${PORT}`)
        console.log(`üåê URL del webhook: http://tu-servidor:${webhookPort}/chatwoot/webhook`)
        
    } catch (error) {
        console.error('‚ùå Error al iniciar:', error)
        process.exit(1)
    }
}

// Manejar cierre graceful
process.on('SIGINT', async () => {
    console.log('\nüîÑ Cerrando aplicaci√≥n...')
    await vacantesDB.close()
    process.exit(0)
})

process.on('SIGTERM', async () => {
    console.log('\nüîÑ Cerrando aplicaci√≥n...')
    await vacantesDB.close()
    process.exit(0)
})

main().catch(console.error)    